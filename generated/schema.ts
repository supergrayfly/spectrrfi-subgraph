// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class SaleOffer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SaleOffer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SaleOffer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SaleOffer", id.toString(), this);
    }
  }

  static load(id: string): SaleOffer | null {
    return changetype<SaleOffer | null>(store.get("SaleOffer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get selling(): BigInt | null {
    let value = this.get("selling");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set selling(value: BigInt | null) {
    if (!value) {
      this.unset("selling");
    } else {
      this.set("selling", Value.fromBigInt(<BigInt>value));
    }
  }

  get sellFor(): BigInt | null {
    let value = this.get("sellFor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sellFor(value: BigInt | null) {
    if (!value) {
      this.unset("sellFor");
    } else {
      this.set("sellFor", Value.fromBigInt(<BigInt>value));
    }
  }

  get collateral(): BigInt | null {
    let value = this.get("collateral");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set collateral(value: BigInt | null) {
    if (!value) {
      this.unset("collateral");
    } else {
      this.set("collateral", Value.fromBigInt(<BigInt>value));
    }
  }

  get repayInSec(): BigInt | null {
    let value = this.get("repayInSec");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set repayInSec(value: BigInt | null) {
    if (!value) {
      this.unset("repayInSec");
    } else {
      this.set("repayInSec", Value.fromBigInt(<BigInt>value));
    }
  }

  get timeAccepted(): BigInt | null {
    let value = this.get("timeAccepted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timeAccepted(value: BigInt | null) {
    if (!value) {
      this.unset("timeAccepted");
    } else {
      this.set("timeAccepted", Value.fromBigInt(<BigInt>value));
    }
  }

  get timeCreated(): BigInt | null {
    let value = this.get("timeCreated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timeCreated(value: BigInt | null) {
    if (!value) {
      this.unset("timeCreated");
    } else {
      this.set("timeCreated", Value.fromBigInt(<BigInt>value));
    }
  }

  get exchangeRate(): BigInt | null {
    let value = this.get("exchangeRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set exchangeRate(value: BigInt | null) {
    if (!value) {
      this.unset("exchangeRate");
    } else {
      this.set("exchangeRate", Value.fromBigInt(<BigInt>value));
    }
  }

  get sellingId(): i32 {
    let value = this.get("sellingId");
    return value!.toI32();
  }

  set sellingId(value: i32) {
    this.set("sellingId", Value.fromI32(value));
  }

  get sellForId(): i32 {
    let value = this.get("sellForId");
    return value!.toI32();
  }

  set sellForId(value: i32) {
    this.set("sellForId", Value.fromI32(value));
  }

  get collateralId(): i32 {
    let value = this.get("collateralId");
    return value!.toI32();
  }

  set collateralId(value: i32) {
    this.set("collateralId", Value.fromI32(value));
  }

  get seller(): Bytes | null {
    let value = this.get("seller");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set seller(value: Bytes | null) {
    if (!value) {
      this.unset("seller");
    } else {
      this.set("seller", Value.fromBytes(<Bytes>value));
    }
  }

  get buyer(): Bytes | null {
    let value = this.get("buyer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set buyer(value: Bytes | null) {
    if (!value) {
      this.unset("buyer");
    } else {
      this.set("buyer", Value.fromBytes(<Bytes>value));
    }
  }

  get status(): i32 {
    let value = this.get("status");
    return value!.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get ratio(): BigInt | null {
    let value = this.get("ratio");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ratio(value: BigInt | null) {
    if (!value) {
      this.unset("ratio");
    } else {
      this.set("ratio", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class BuyOffer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BuyOffer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BuyOffer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BuyOffer", id.toString(), this);
    }
  }

  static load(id: string): BuyOffer | null {
    return changetype<BuyOffer | null>(store.get("BuyOffer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get buying(): BigInt | null {
    let value = this.get("buying");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set buying(value: BigInt | null) {
    if (!value) {
      this.unset("buying");
    } else {
      this.set("buying", Value.fromBigInt(<BigInt>value));
    }
  }

  get buyFor(): BigInt | null {
    let value = this.get("buyFor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set buyFor(value: BigInt | null) {
    if (!value) {
      this.unset("buyFor");
    } else {
      this.set("buyFor", Value.fromBigInt(<BigInt>value));
    }
  }

  get collateral(): BigInt | null {
    let value = this.get("collateral");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set collateral(value: BigInt | null) {
    if (!value) {
      this.unset("collateral");
    } else {
      this.set("collateral", Value.fromBigInt(<BigInt>value));
    }
  }

  get repayInSec(): BigInt | null {
    let value = this.get("repayInSec");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set repayInSec(value: BigInt | null) {
    if (!value) {
      this.unset("repayInSec");
    } else {
      this.set("repayInSec", Value.fromBigInt(<BigInt>value));
    }
  }

  get timeAccepted(): BigInt | null {
    let value = this.get("timeAccepted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timeAccepted(value: BigInt | null) {
    if (!value) {
      this.unset("timeAccepted");
    } else {
      this.set("timeAccepted", Value.fromBigInt(<BigInt>value));
    }
  }

  get timeCreated(): BigInt | null {
    let value = this.get("timeCreated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timeCreated(value: BigInt | null) {
    if (!value) {
      this.unset("timeCreated");
    } else {
      this.set("timeCreated", Value.fromBigInt(<BigInt>value));
    }
  }

  get exchangeRate(): BigInt | null {
    let value = this.get("exchangeRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set exchangeRate(value: BigInt | null) {
    if (!value) {
      this.unset("exchangeRate");
    } else {
      this.set("exchangeRate", Value.fromBigInt(<BigInt>value));
    }
  }

  get buyingId(): i32 {
    let value = this.get("buyingId");
    return value!.toI32();
  }

  set buyingId(value: i32) {
    this.set("buyingId", Value.fromI32(value));
  }

  get buyForId(): i32 {
    let value = this.get("buyForId");
    return value!.toI32();
  }

  set buyForId(value: i32) {
    this.set("buyForId", Value.fromI32(value));
  }

  get collateralId(): i32 {
    let value = this.get("collateralId");
    return value!.toI32();
  }

  set collateralId(value: i32) {
    this.set("collateralId", Value.fromI32(value));
  }

  get buyer(): Bytes | null {
    let value = this.get("buyer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set buyer(value: Bytes | null) {
    if (!value) {
      this.unset("buyer");
    } else {
      this.set("buyer", Value.fromBytes(<Bytes>value));
    }
  }

  get seller(): Bytes | null {
    let value = this.get("seller");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set seller(value: Bytes | null) {
    if (!value) {
      this.unset("seller");
    } else {
      this.set("seller", Value.fromBytes(<Bytes>value));
    }
  }

  get status(): i32 {
    let value = this.get("status");
    return value!.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get ratio(): BigInt | null {
    let value = this.get("ratio");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ratio(value: BigInt | null) {
    if (!value) {
      this.unset("ratio");
    } else {
      this.set("ratio", Value.fromBigInt(<BigInt>value));
    }
  }
}
